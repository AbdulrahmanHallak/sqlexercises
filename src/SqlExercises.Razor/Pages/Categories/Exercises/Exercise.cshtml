@page "/Categories/{category:alpha}/Exercises/{id:int}"
@model ExerciseModel
@{
    ViewData["Title"] = "Exercise";
}
<div class="container mt-4">
    <h2>Exercise</h2>
    <p>@Model.Exercise.Question</p>
    <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#erdCollapse"
        aria-expanded="false" aria-controls="erdCollapse">
        Show/Hide ERD
    </button>
    <div class="collapse mb-3" id="erdCollapse">
        <img src="/images/erd.jpg" alt="ERD" class="img-fluid border" />
    </div>
    <div class="row">
        <div class="col-md-6">
            <label for="sqlInput" class="form-label" style="display: block;">Your SQL:</label>
            <textarea id="sqlInput" class="sql-input"></textarea>
            <div>
                <button id="runQueryBtn" class="btn btn-primary mt-2">Run</button>
            </div>
        </div>
        <div class="col-md-6">
            <label class="form-label">Expected Results:</label>
            <div id="expectedResultsBox"
                style="min-height: 60px; max-height: 300px; overflow-y: auto; overflow-x: auto;">
                @if (!Model.ExpectedResult.Any())
                {
                    <em>No expected results.</em>
                }
                else
                {
                    <table class="table table-bordered table-sm mb-0">
                        <thead>
                            <tr>
                                @foreach (var col in Model.ExpectedResult.First().Keys.ToArray())
                                {
                                    <th>@col</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in Model.ExpectedResult)
                            {
                                <tr>
                                    @foreach (var col in Model.ExpectedResult.First().Keys.ToArray())
                                    {
                                        <td>@row[col]</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>
    </div>
    <div class="mt-3">
        <label class="form-label">Results <span id="correctnessLabel"></span></label>
        <div id="resultsBox" class="bg-white border p-2"
            style="min-height: 60px; max-height: 300px; overflow-y: auto; overflow-x: auto;">(Results will
            appear here)</div>
    </div>
    <div class="mt-4">
        <button class="btn btn-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#solutionCollapse"
            aria-expanded="false" aria-controls="solutionCollapse" id="showSolutionBtn">
            Show Solution
        </button>
        <div class="collapse" id="solutionCollapse">
            <div class="card card-body mt-2">
                <strong>Solution:</strong>
                <pre>@Model.Exercise.Solution</pre>
                <strong>Explanation:</strong>
                <p>@Model.Exercise.Answer</p>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        function renderTable(data) {
            if (!Array.isArray(data) || !data.length)
                return '<em>No results.</em>';

            const columns = Object.keys(data[0]);
            const headers = columns.map(c => `<th>${c}</th>`).join('');

            const rows = data.map(row =>
                `<tr>${columns.map(col => `<td>${row[col]}</td>`).join('')}</tr>`
            ).join('');

            return `
                            <table class="table table-bordered table-sm mb-0">
                                <thead><tr>${headers}</tr></thead>
                                <tbody>${rows}</tbody>
                            </table>
                        `;
        }

        document.getElementById('runQueryBtn').addEventListener('click', async () => {
            const sql = document.getElementById('sqlInput').value.trim();
            const resultsBox = document.getElementById('resultsBox');
            const correctnessLabel = document.getElementById('correctnessLabel');

            resultsBox.innerHTML = '<em>Loading...</em>';
            correctnessLabel.textContent = '';

            try {
                const formData = new FormData();
                formData.append('PostedSolution', sql);

                const response = await fetch(window.location.pathname, {
                    method: 'POST',
                    body: formData
                });

                const { result, isEqual } = await response.json();

                // Handle response
                if (typeof result === 'string' && result.startsWith('ERROR')) {
                    resultsBox.innerHTML = `<span class='text-danger'>${result}</span>`;
                } else if (Array.isArray(result)) {
                    resultsBox.innerHTML = renderTable(result);
                } else {
                    resultsBox.innerHTML = result;
                }

                // Update correctness indicator
                if (typeof isEqual !== 'undefined') {
                    const isCorrect = isEqual ? 'Correct' : 'Incorrect';
                    const colorClass = isEqual ? 'text-success' : 'text-danger';
                    correctnessLabel.innerHTML = `<span class='${colorClass}'>${isCorrect}</span>`;
                }
            } catch (err) {
                resultsBox.innerHTML = `<span class='text-danger'>${err.message}</span>`;
            }
        });
    </script>
}